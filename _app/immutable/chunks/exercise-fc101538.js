var h=Object.defineProperty;var u=(n,t,l)=>t in n?h(n,t,{enumerable:!0,configurable:!0,writable:!0,value:l}):n[t]=l;var a=(n,t,l)=>(u(n,typeof t!="symbol"?t+"":t,l),l);const e={Barbell:"Barbell",Dumbell:"Dumbell",Kettlebell:"Kettlebell",Bodyweight:"Bodyweight",Time:"Time"};class w{static icon(t){switch(t){case e.Barbell:return"fitness_center";case e.Dumbell:return"exercise";case e.Kettlebell:return"weight";case e.Bodyweight:return"directions_run";case e.Time:return"timer";default:throw`icon not defined for Type ${t}`}}static formatDifficulty(t,l){switch(t){case e.Barbell:case e.Dumbell:case e.Kettlebell:return`${l}kg`;case e.Bodyweight:return"";case e.Time:let s="",i,o,c;return(i=Math.floor(l/3600))&&(s+=`${i}h`,l%=3600),(o=Math.floor(l/60))&&(s+=`${o}m`,l%=60),(c=Math.floor(l))&&(s+=`${c}s`),s;default:throw`format not defined for Type ${t}`}}}class r{constructor(t,l){a(this,"id");a(this,"name");a(this,"type");this.id=t.toLowerCase().replaceAll(" ","_"),this.name=t,this.type=l}icon(){return w.icon(this.type)}difficulty(t){return w.formatDifficulty(this.type,t)}}const B=new Map([new r("Squat",e.Barbell),new r("Deadlift",e.Barbell),new r("Bench press",e.Barbell),new r("Incline bench",e.Barbell),new r("Barbell row",e.Barbell),new r("Overhead press",e.Barbell),new r("Bicep curls",e.Dumbell),new r("Plank",e.Time),new r("Push-up",e.Bodyweight),new r("Pull-up",e.Bodyweight),new r("Chin-up",e.Bodyweight),new r("Kettlebell swing",e.Kettlebell)].map(n=>[n.id,n]));export{B as S};
