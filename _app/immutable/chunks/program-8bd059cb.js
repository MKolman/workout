const r={Barbell:"Barbell",Dumbell:"Dumbell",Kettlebell:"Kettlebell",Bodyweight:"Bodyweight",Time:"Time",Machine:"Machine",Velocity:"Velocity"};class h{static icon(e){switch(e){case r.Barbell:return"fitness_center";case r.Dumbell:return"exercise";case r.Kettlebell:return"weight";case r.Bodyweight:return"directions_run";case r.Time:return"timer";case r.Machine:return"table_rows_narrow";case r.Velocity:return"speed";default:throw`icon not defined for Type '${e}' '${r.Barbell}' ${e==r.Barbell} ${e=="Barbell"} ${e.charCodeAt(e.length-1)}!= ${r.Barbell.length}`}}static formatDifficulty(e,t){switch(e){case r.Barbell:case r.Dumbell:case r.Kettlebell:case r.Machine:return`${t}kg`;case r.Bodyweight:return"";case r.Velocity:return`${t}km/h`;case r.Time:let s="",a,d,c;return(a=Math.floor(t/3600))&&(s+=`${a}h`,t%=3600),(d=Math.floor(t/60))&&(s+=`${d}m`,t%=60),(c=Math.floor(t))&&(s+=`${c}s`),s;default:throw`format not defined for Type ${e}`}}}class i{constructor(e,t,s,a){this.id=e,this.name=t,this.shortName=s,this.type=a}icon(){return h.icon(this.type)}difficulty(e){return h.formatDifficulty(this.type,e)}async save(){var e;await((e=i.db)==null?void 0:e.put(this))}static async get(e){var t;return await((t=i.db)==null?void 0:t.get(e))||w}static async bulkGet(e){var t,s;return((s=await((t=i.db)==null?void 0:t.bulkGet(e)))==null?void 0:s.map(a=>a||w))||e.map(()=>w)}static async all(){var e;return await((e=i.db)==null?void 0:e.toArray())||[]}}const w=new i("not_loaded","Not Loaded","Not Loaded",r.Barbell);async function I(){var a;if(!i.db){console.error("Database not available");return}const o=await fetch("/exercises.csv");if(!o.ok){console.error("Failed to fetch exercises.csv",o);return}const t=(await o.text()).split(`
`),s=[];for(const d of t.slice(1)){const[c,u,p,f]=d.trimEnd().split(",");s.push(new i(c,u,p,f))}await((a=i.db)==null?void 0:a.bulkAdd(s))}function x(o){let e=[],t=0,s=null;for(const a of o)a!=0&&(s!==a&&(s!==null&&e.push(`${t}x${s}`),t=0),s=a,t+=1);return s!==null&&e.push(`${t}x${s}`),e.length===0?"0x0":e.join(", ")}class b{constructor(e,t,s){this.id=e,this.name=t,this.work=s}async load(){const e=await i.bulkGet(this.work.map(s=>s.exerciseId)),t=this.work.map((s,a)=>({exercise:e[a],sets:s.sets}));return new n(this.name,t,this.id)}}class n{constructor(e,t,s){this.id=s||e.toLowerCase().replace(" ","_"),this.name=e,this.work=t}setsDisplay(){const e=[];for(const t of this.work){const s={sets:x(t.sets),name:t.exercise.name,icon:t.exercise.icon()};e.push(s)}return e}toDb(){return new b(this.id,this.name,this.work.map(e=>({exerciseId:e.exercise.id,sets:e.sets})))}async save(){var e;return(e=n.db)==null?void 0:e.put(this.toDb())}static async get(e){var s;const t=await((s=n.db)==null?void 0:s.get(e));return await(t==null?void 0:t.load())||k}static async all(){var t;const e=await((t=n.db)==null?void 0:t.toArray())||[];return console.log("allWO",e,n.db),await Promise.all(e.map(s=>s.load()))}}const k=new n("Loading...",[]);async function $(){const[o,e,t,s,a,d]=["barbell:back_squat","barbell:bench_press","barbell:row","barbell:standing_overhead_press","barbell:deadlift","barbell:incline_bench_press"];n.db&&await n.db.bulkPut([{name:"5x5 B",work:[{sets:[5,5,5,5,5],exerciseId:o},{sets:[5,5,5,5,5],exerciseId:s},{sets:[5,5,5,5,5],exerciseId:a}]},{name:"5x5 A",work:[{sets:[5,5,5,5,5],exerciseId:o},{sets:[5,5,5,5,5],exerciseId:e},{sets:[5,5,5,5,5],exerciseId:t}]},{name:"Madcow A",work:[{sets:[5,5,5,5,5],exerciseId:o},{sets:[5,5,5,5,5],exerciseId:e},{sets:[5,5,5,5,5],exerciseId:t}]},{name:"Madcow B",work:[{sets:[5,5,5,5],exerciseId:o},{sets:[5,5,5,5],exerciseId:d},{sets:[5,5,5,5],exerciseId:a}]},{name:"Madcow C",work:[{sets:[5,5,5,5,3,8],exerciseId:o},{sets:[5,5,5,5,3,8],exerciseId:e},{sets:[5,5,5,5,3,8],exerciseId:t}]}].map(({name:c,work:u})=>new b(c.toLowerCase().replaceAll(" ","_"),c,u)))}class m{constructor(e,t,s){this.id=e,this.name=t,this.workoutIds=s}async load(){const e=await Promise.all(this.workoutIds.map(t=>n.get(t)));return new l(this.name,e,this.id)}}class l{constructor(e,t,s){this.id=s||e.toLowerCase().replaceAll(" ","_"),this.name=e,this.workouts=t}toDb(){return new m(this.id,this.name,this.workouts.map(e=>e.id))}async save(){var e;await((e=l.db)==null?void 0:e.put(this.toDb()))}static async get(e){var s;const t=await((s=l.db)==null?void 0:s.get(e));return t?await t.load():y}static async all(){var t;const e=await((t=l.db)==null?void 0:t.toArray());return e?await Promise.all(e.map(s=>s.load())):[]}}const y=new l("Not Loaded",[]),g=[{name:"Stronglifts 5x5",wo:["5x5_a","5x5_b"]},{name:"Madcow 5x5",wo:["madcow_a","madcow_b","madcow_c"]}];async function B(){var o;await((o=l.db)==null?void 0:o.bulkPut(g.map(({name:e,wo:t})=>new m(e.toLowerCase().replaceAll(" ","_"),e,t))))}export{i as E,y as N,l as P,n as W,b as a,m as b,$ as c,B as d,k as e,x as f,I as p};
